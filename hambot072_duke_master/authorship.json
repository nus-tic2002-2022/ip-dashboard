[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"hambot072"},"content":"    mainClassName \u003d \"Duke\"","lastModifiedDate":"2022-04-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"hambot072":1,"-":45}},{"path":"src/main/java/Constant.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"public class Constant {","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"    public static final Pattern MARK \u003d Pattern.compile(\"^mark[\\\\s][0-9]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"    public static final Pattern UNMARKED \u003d Pattern.compile(\"^unmark[\\\\s][0-9]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"    public static final Pattern TODO \u003d Pattern.compile(\"^todo[\\\\s][\\\\s\\\\S]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"    public static final Pattern DELETE \u003d Pattern.compile(\"^delete[\\\\s][0-9]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"    public static final Pattern EVENT \u003d Pattern.compile(\"^event[\\\\s][\\\\s\\\\S]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"    public static final Pattern DEADLINE \u003d Pattern.compile(\"^deadline[\\\\s][\\\\s\\\\S]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"    public static final Pattern DATE \u003d Pattern.compile(\"[^\\\\s]*\\\\s*(.*)\");","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"    public static final Pattern READER \u003d Pattern.compile(\"\\\\[([A-Z]|\\\\s*)\\\\]\\\\s*\\\\[([A-Z]|\\\\s*)\\\\]\\\\s*(.*)\");","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"    public static final Pattern TAG \u003d Pattern.compile(\"^tag[\\\\s][\\\\s\\\\S]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":"    public static final Pattern UNTAG \u003d Pattern.compile(\"^untag[\\\\s][\\\\s\\\\S]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":"    public static final Pattern TAGCONTENT \u003d Pattern.compile(\"[^\\\\s]*\\\\s*(.*)\");","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":"    public static final Pattern FIND \u003d Pattern.compile(\"^find[\\\\s][\\\\s\\\\S]*$\");","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"    public static final Pattern DEADLINE_VALIDATE \u003d Pattern.compile(\"deadline\\\\s*(.*)(\\\\/by.*)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"    public static final Pattern TODO_VALIDATE \u003d Pattern.compile(\"todo\\\\s*(.*)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":19,"author":{"gitId":"hambot072"},"content":"    public static final Pattern EVENT_VALIDATE \u003d Pattern.compile(\"event\\\\s*(.*)(\\\\/at.*)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":20,"author":{"gitId":"hambot072"},"content":"    public static final Pattern DELETE_VALIDATE \u003d Pattern.compile(\"delete\\\\s*(\\\\d+)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":21,"author":{"gitId":"hambot072"},"content":"    public static final Pattern MARK_VALIDATE \u003d Pattern.compile(\"mark\\\\s*(\\\\d+)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":22,"author":{"gitId":"hambot072"},"content":"    public static final Pattern UNMARK_VALIDATE \u003d Pattern.compile(\"unmark\\\\s*(\\\\d+)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":23,"author":{"gitId":"hambot072"},"content":"    public static final Pattern UNTAG_VALIDATE \u003d Pattern.compile(\"untag\\\\s*(\\\\d+)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":24,"author":{"gitId":"hambot072"},"content":"    public static final Pattern TAG_VALIDATE \u003d Pattern.compile(\"tag\\\\s*(\\\\d+)\\\\s*(.*)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":25,"author":{"gitId":"hambot072"},"content":"    public static final Pattern FIND_VALIDATE \u003d Pattern.compile(\"find\\\\s*(.*)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":26,"author":{"gitId":"hambot072"},"content":"    public static final Pattern EVENTFROMFILE \u003d Pattern.compile(\"\\\\s*(.*)at\\\\:\\\\s*(.*)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":27,"author":{"gitId":"hambot072"},"content":"    public static final Pattern DEADLINEFROMFILE \u003d Pattern.compile(\"\\\\s*(.*)by\\\\:\\\\s*(.*)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":28,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":29,"author":{"gitId":"hambot072"},"content":"    public static final Pattern TAG_EXTRACT \u003d Pattern.compile(\"(.*)\\\\s*\\\\#(.*)\");","lastModifiedDate":"2022-04-17"},{"lineNumber":30,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":31,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":32,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":33,"author":{"gitId":"hambot072"},"content":"    public static final String TODO_CANNOT_BE_EMPTY \u003d \"\\t\" + \"The description of a todo task cannot be empty\";","lastModifiedDate":"2022-04-17"},{"lineNumber":34,"author":{"gitId":"hambot072"},"content":"    public static final String DEADLINE_CANNOT_BE_EMPTY \u003d \"\\t\" + \"The description of a deadline task cannot be empty\";","lastModifiedDate":"2022-04-17"},{"lineNumber":35,"author":{"gitId":"hambot072"},"content":"    public static final String DATE_TIME_CANNOT_BE_FOUND \u003d \"\\t\" + \"The date and time cannot be found\";","lastModifiedDate":"2022-04-17"},{"lineNumber":36,"author":{"gitId":"hambot072"},"content":"    public static final String EVENT_CANNOT_BE_EMPTY \u003d \"\\t\" + \"The description of a event task cannot be empty\";","lastModifiedDate":"2022-04-17"},{"lineNumber":37,"author":{"gitId":"hambot072"},"content":"    public static final String TASKTAG_CANNOT_BE_EMPTY \u003d \"\\t\" + \"Please choose a task to tag.\";","lastModifiedDate":"2022-04-17"},{"lineNumber":38,"author":{"gitId":"hambot072"},"content":"    public static final String UNTAG_CANNOT_BE_EMPTY \u003d \"\\t\" + \"Please choose a task to untag.\";","lastModifiedDate":"2022-04-17"},{"lineNumber":39,"author":{"gitId":"hambot072"},"content":"    public static final String DELETE_CANNOT_BE_EMPTY \u003d \"\\t\" + \"Please choose a task to delete.\";","lastModifiedDate":"2022-04-17"},{"lineNumber":40,"author":{"gitId":"hambot072"},"content":"    public static final String TAGCONTENT_CANNOT_BE_EMPTY \u003d \"\\t\" + \"Please key in content for the tag.\";","lastModifiedDate":"2022-04-17"},{"lineNumber":41,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":41}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"import java.io.IOException;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"import java.io.File;","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"    private final static String logo \u003d","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"            \" ____        _        \\n\"","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"    public static void main(String[] args) throws IOException, DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":"        String home \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":"        File newFile \u003d new File(home + \"\\\\\" + \"taskList.txt\");","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"        if(!newFile.exists()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"            try {","lastModifiedDate":"2022-04-15"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"                if (newFile.createNewFile()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":19,"author":{"gitId":"hambot072"},"content":"                    System.out.println(\"\\t\" + \"Save file created: \" + newFile.getName());","lastModifiedDate":"2022-04-15"},{"lineNumber":20,"author":{"gitId":"hambot072"},"content":"                }","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"hambot072"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-04-15"},{"lineNumber":22,"author":{"gitId":"hambot072"},"content":"                System.out.println(\"An error occurred.\");","lastModifiedDate":"2022-04-15"},{"lineNumber":23,"author":{"gitId":"hambot072"},"content":"                e.printStackTrace();","lastModifiedDate":"2022-04-15"},{"lineNumber":24,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"hambot072"},"content":"        } else {","lastModifiedDate":"2022-04-15"},{"lineNumber":26,"author":{"gitId":"hambot072"},"content":"            System.out.println(\"\\t\" + \"Save file already exists.\");","lastModifiedDate":"2022-04-15"},{"lineNumber":27,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":28,"author":{"gitId":"hambot072"},"content":"        Storage storage \u003d new Storage(\"taskList.txt\");","lastModifiedDate":"2022-04-15"},{"lineNumber":29,"author":{"gitId":"hambot072"},"content":"        TaskManager taskManager \u003d new TaskManager(storage);","lastModifiedDate":"2022-04-15"},{"lineNumber":30,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":31,"author":{"gitId":"hambot072"},"content":"        taskManager.run();","lastModifiedDate":"2022-04-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-11"},{"lineNumber":34,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"hambot072":26,"-":8}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2022-03-23"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"    public DukeException (final String errorMessage){","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"        super(errorMessage);","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-03-23"}],"authorContributionMap":{"hambot072":5}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"import Task.*;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"import java.io.File;","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"import java.io.IOException;","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"public class Storage {","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"    private String saveFileName;","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":"    private File file;","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":"    //Todo: Add something to check whether a text file with the name taskList.text already exists,","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":"    // if it does then read from that and create the taskList array. Reader for the text file should be in a function.","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"    public Storage(String fileName) {","lastModifiedDate":"2022-04-15"},{"lineNumber":19,"author":{"gitId":"hambot072"},"content":"        this.saveFileName \u003d fileName;","lastModifiedDate":"2022-04-15"},{"lineNumber":20,"author":{"gitId":"hambot072"},"content":"        this.file \u003d new File(fileName);","lastModifiedDate":"2022-04-15"},{"lineNumber":21,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":22,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":23,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":24,"author":{"gitId":"hambot072"},"content":"    public TaskList createArrayList() throws FileNotFoundException, DukeException {","lastModifiedDate":"2022-04-15"},{"lineNumber":25,"author":{"gitId":"hambot072"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2022-04-15"},{"lineNumber":26,"author":{"gitId":"hambot072"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":27,"author":{"gitId":"hambot072"},"content":"        int taskCounter \u003d 1;","lastModifiedDate":"2022-04-15"},{"lineNumber":28,"author":{"gitId":"hambot072"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":29,"author":{"gitId":"hambot072"},"content":"            String line \u003d sc.nextLine();","lastModifiedDate":"2022-04-17"},{"lineNumber":30,"author":{"gitId":"hambot072"},"content":"            Matcher reader \u003d Constant.READER.matcher(line);","lastModifiedDate":"2022-04-17"},{"lineNumber":31,"author":{"gitId":"hambot072"},"content":"            if (!reader.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":32,"author":{"gitId":"hambot072"},"content":"                throw new DukeException(\"\\t\" + \"Read error on file read\");","lastModifiedDate":"2022-04-17"},{"lineNumber":33,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-04-17"},{"lineNumber":34,"author":{"gitId":"hambot072"},"content":"            if (reader.group(1).equals(\"T\")) {","lastModifiedDate":"2022-04-15"},{"lineNumber":35,"author":{"gitId":"hambot072"},"content":"                taskList.createTodoTask(reader.group(3));","lastModifiedDate":"2022-04-15"},{"lineNumber":36,"author":{"gitId":"hambot072"},"content":"                taskCounter++;","lastModifiedDate":"2022-04-15"},{"lineNumber":37,"author":{"gitId":"hambot072"},"content":"            } else if (reader.group(1).equals(\"D\")) {","lastModifiedDate":"2022-04-15"},{"lineNumber":38,"author":{"gitId":"hambot072"},"content":"                //input from text file : [D] [X] deadline task by: 2022-04-10T12:00","lastModifiedDate":"2022-04-15"},{"lineNumber":39,"author":{"gitId":"hambot072"},"content":"                try {","lastModifiedDate":"2022-04-17"},{"lineNumber":40,"author":{"gitId":"hambot072"},"content":"                    taskList.createDeadlineTaskFromFile(reader.group(3).trim());","lastModifiedDate":"2022-04-17"},{"lineNumber":41,"author":{"gitId":"hambot072"},"content":"                    taskCounter++;","lastModifiedDate":"2022-04-15"},{"lineNumber":42,"author":{"gitId":"hambot072"},"content":"                } catch (DukeException e){","lastModifiedDate":"2022-04-17"},{"lineNumber":43,"author":{"gitId":"hambot072"},"content":"                    throw new DukeException(e.getMessage() + \"\\n\" +line);","lastModifiedDate":"2022-04-17"},{"lineNumber":44,"author":{"gitId":"hambot072"},"content":"                }","lastModifiedDate":"2022-04-17"},{"lineNumber":45,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":46,"author":{"gitId":"hambot072"},"content":"            } else if (reader.group(1).equals(\"E\")) {","lastModifiedDate":"2022-04-15"},{"lineNumber":47,"author":{"gitId":"hambot072"},"content":"                //input from text file : [E] [ ] event task at: 2022-04-10T12:00","lastModifiedDate":"2022-04-15"},{"lineNumber":48,"author":{"gitId":"hambot072"},"content":"                try{","lastModifiedDate":"2022-04-17"},{"lineNumber":49,"author":{"gitId":"hambot072"},"content":"                    taskList.createEventTaskFromFile(reader.group(3));","lastModifiedDate":"2022-04-15"},{"lineNumber":50,"author":{"gitId":"hambot072"},"content":"                    taskCounter++;","lastModifiedDate":"2022-04-15"},{"lineNumber":51,"author":{"gitId":"hambot072"},"content":"                } catch (DukeException e){","lastModifiedDate":"2022-04-17"},{"lineNumber":52,"author":{"gitId":"hambot072"},"content":"                    throw new DukeException(e.getMessage() + \"\\n\" +line);","lastModifiedDate":"2022-04-17"},{"lineNumber":53,"author":{"gitId":"hambot072"},"content":"                }","lastModifiedDate":"2022-04-17"},{"lineNumber":54,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":55,"author":{"gitId":"hambot072"},"content":"            } else if (reader.group(2).equals(\"X\")) {","lastModifiedDate":"2022-04-15"},{"lineNumber":56,"author":{"gitId":"hambot072"},"content":"                taskList.markTaskAsDone(String.valueOf(taskCounter));","lastModifiedDate":"2022-04-15"},{"lineNumber":57,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-04-15"},{"lineNumber":58,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":59,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":60,"author":{"gitId":"hambot072"},"content":"        if (taskList.getTaskList().isEmpty()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":61,"author":{"gitId":"hambot072"},"content":"            System.out.println(\"\\t\" + \"Save file is empty, no tasks created.\");","lastModifiedDate":"2022-04-15"},{"lineNumber":62,"author":{"gitId":"hambot072"},"content":"        } else {","lastModifiedDate":"2022-04-15"},{"lineNumber":63,"author":{"gitId":"hambot072"},"content":"            System.out.println(\"\\t\" + \"Task List has been loaded from save file.\");","lastModifiedDate":"2022-04-15"},{"lineNumber":64,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":65,"author":{"gitId":"hambot072"},"content":"        taskList.displayList();","lastModifiedDate":"2022-04-15"},{"lineNumber":66,"author":{"gitId":"hambot072"},"content":"        return taskList;","lastModifiedDate":"2022-04-15"},{"lineNumber":67,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":68,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":69,"author":{"gitId":"hambot072"},"content":"    public void saveFile(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2022-04-15"},{"lineNumber":70,"author":{"gitId":"hambot072"},"content":"        try {","lastModifiedDate":"2022-04-15"},{"lineNumber":71,"author":{"gitId":"hambot072"},"content":"            PrintWriter printWriter \u003d new PrintWriter(file);","lastModifiedDate":"2022-04-15"},{"lineNumber":72,"author":{"gitId":"hambot072"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-04-15"},{"lineNumber":73,"author":{"gitId":"hambot072"},"content":"                printWriter.println(taskList.get(i).toString().trim());","lastModifiedDate":"2022-04-15"},{"lineNumber":74,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-04-15"},{"lineNumber":75,"author":{"gitId":"hambot072"},"content":"            printWriter.close();","lastModifiedDate":"2022-04-15"},{"lineNumber":76,"author":{"gitId":"hambot072"},"content":"        } catch (FileNotFoundException ignore) {","lastModifiedDate":"2022-04-15"},{"lineNumber":77,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":78,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":79,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":80,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":81,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":81}},{"path":"src/main/java/Task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"package Task;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"    public Deadline(final String description, final LocalDateTime dateTime) {","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"        super(description);","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"    @Override","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"    public String toString() {","lastModifiedDate":"2022-04-15"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"        return \"[D] \" + this.getStatusIcon() + \" \" + this.description + \" by: \" + dateTime + \" \" + (this.isTagged ? \"#\" : \"\") + this.tag;","lastModifiedDate":"2022-04-15"},{"lineNumber":19,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":20,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":20}},{"path":"src/main/java/Task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"package Task;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"public class Event extends Task {","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"    public Event(final String description, final LocalDateTime dateTime) {","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"        super(description);","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":"    @Override","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":"    public String toString() {","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"        return \"[E] \" + this.getStatusIcon() + \" \" + this.description + \" at: \" + dateTime + \" \" + (this.isTagged ? \"#\" : \"\") + this.tag;","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":18}},{"path":"src/main/java/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"package Task;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"public abstract class Task {","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"    protected final String description;","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"    protected String tag;","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"    protected boolean isTagged;","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"    public Task(String description) {","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"        this.tag \u003d \"\";","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":"        this.isTagged \u003d false;","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"     * This methods returns the status icon as a string, dependent on whether isDone is true or false.","lastModifiedDate":"2022-04-15"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"     * \"[X]\" if it is true, \"[ ]\" if it is false.","lastModifiedDate":"2022-04-15"},{"lineNumber":19,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":20,"author":{"gitId":"hambot072"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-04-15"},{"lineNumber":21,"author":{"gitId":"hambot072"},"content":"        return (this.isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2022-04-15"},{"lineNumber":22,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":23,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":24,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":25,"author":{"gitId":"hambot072"},"content":"     * This method returns the description variable from of a Task object.","lastModifiedDate":"2022-04-15"},{"lineNumber":26,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":27,"author":{"gitId":"hambot072"},"content":"    public String getDescription() {","lastModifiedDate":"2022-04-15"},{"lineNumber":28,"author":{"gitId":"hambot072"},"content":"        return this.description;","lastModifiedDate":"2022-04-15"},{"lineNumber":29,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":30,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":31,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":32,"author":{"gitId":"hambot072"},"content":"     * This method takes in a boolean and sets the isDone variable of the Task object using that","lastModifiedDate":"2022-04-15"},{"lineNumber":33,"author":{"gitId":"hambot072"},"content":"     * value.","lastModifiedDate":"2022-04-15"},{"lineNumber":34,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":35,"author":{"gitId":"hambot072"},"content":"    public void setStatus(boolean isDone) {","lastModifiedDate":"2022-04-15"},{"lineNumber":36,"author":{"gitId":"hambot072"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-04-15"},{"lineNumber":37,"author":{"gitId":"hambot072"},"content":"        System.out.println(\"\\t\" + \"This task has been marked as \" + (this.isDone ? \"done:\" : \"not done:\") + \"\\n\" + \"\\t\" + this.toString());","lastModifiedDate":"2022-04-17"},{"lineNumber":38,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":39,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":40,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":41,"author":{"gitId":"hambot072"},"content":"     * This method takes in a String and sets the tag variable of the Task object.","lastModifiedDate":"2022-04-15"},{"lineNumber":42,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":43,"author":{"gitId":"hambot072"},"content":"    public void setTag(String str) {","lastModifiedDate":"2022-04-15"},{"lineNumber":44,"author":{"gitId":"hambot072"},"content":"        if (str.isEmpty()){","lastModifiedDate":"2022-04-17"},{"lineNumber":45,"author":{"gitId":"hambot072"},"content":"            return;","lastModifiedDate":"2022-04-17"},{"lineNumber":46,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":47,"author":{"gitId":"hambot072"},"content":"        this.tag \u003d str;","lastModifiedDate":"2022-04-15"},{"lineNumber":48,"author":{"gitId":"hambot072"},"content":"        isTagged \u003d true;","lastModifiedDate":"2022-04-17"},{"lineNumber":49,"author":{"gitId":"hambot072"},"content":"        System.out.println(\"\\t\" + \"This task has been tagged: \" + \"\\n\" + \"\\t\" + this.toString());","lastModifiedDate":"2022-04-17"},{"lineNumber":50,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-17"},{"lineNumber":51,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":52,"author":{"gitId":"hambot072"},"content":"    public void clearTag(){","lastModifiedDate":"2022-04-17"},{"lineNumber":53,"author":{"gitId":"hambot072"},"content":"        this.tag \u003d \"\";","lastModifiedDate":"2022-04-17"},{"lineNumber":54,"author":{"gitId":"hambot072"},"content":"        isTagged \u003d false;","lastModifiedDate":"2022-04-17"},{"lineNumber":55,"author":{"gitId":"hambot072"},"content":"        System.out.println(\"\\t\" + \"This task has been untagged: \" + \"\\n\" + \"\\t\" + this.toString());","lastModifiedDate":"2022-04-17"},{"lineNumber":56,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":57,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":58,"author":{"gitId":"hambot072"},"content":"    public abstract String toString();","lastModifiedDate":"2022-04-15"},{"lineNumber":59,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":60,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":61,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":61}},{"path":"src/main/java/Task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"package Task;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"    public Todo(final String description) {","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"        super(description);","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"    @Override","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"    public String toString() {","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"        return \"[T] \" + this.getStatusIcon() + \" \" + this.description + \" \" + (this.isTagged ? \"#\" : \"\") + this.tag;","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":13}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"import Task.*;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"import java.io.IOException;","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"/**","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":" * This class is designed to handle all Task List functions like adding a task/deadline/event.","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":" * It also includes additional functions like finding specific tasks using a keyword or adding a hashtag","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":" * to a task.","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":" *","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":" * @author (Bay Min Han)","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":" */","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"public class TaskList {","lastModifiedDate":"2022-04-15"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2022-04-15"},{"lineNumber":19,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":20,"author":{"gitId":"hambot072"},"content":"    public TaskList() {","lastModifiedDate":"2022-04-15"},{"lineNumber":21,"author":{"gitId":"hambot072"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-04-15"},{"lineNumber":22,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":23,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":24,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":25,"author":{"gitId":"hambot072"},"content":"     * @return the array list.","lastModifiedDate":"2022-04-17"},{"lineNumber":26,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":27,"author":{"gitId":"hambot072"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2022-04-15"},{"lineNumber":28,"author":{"gitId":"hambot072"},"content":"        return taskList;","lastModifiedDate":"2022-04-15"},{"lineNumber":29,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":30,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":31,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":32,"author":{"gitId":"hambot072"},"content":"     * Loops through the array list and prints it out.","lastModifiedDate":"2022-04-15"},{"lineNumber":33,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":34,"author":{"gitId":"hambot072"},"content":"    public void displayList() {","lastModifiedDate":"2022-04-15"},{"lineNumber":35,"author":{"gitId":"hambot072"},"content":"        int taskCounter \u003d 1;","lastModifiedDate":"2022-04-15"},{"lineNumber":36,"author":{"gitId":"hambot072"},"content":"        assert taskCounter \u003d\u003d 1 : \"List numbering is wrong.\";","lastModifiedDate":"2022-04-15"},{"lineNumber":37,"author":{"gitId":"hambot072"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2022-04-15"},{"lineNumber":38,"author":{"gitId":"hambot072"},"content":"            System.out.println(\"\\t\" + \"There are no saved tasks.\");","lastModifiedDate":"2022-04-15"},{"lineNumber":39,"author":{"gitId":"hambot072"},"content":"        } else {","lastModifiedDate":"2022-04-15"},{"lineNumber":40,"author":{"gitId":"hambot072"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-04-15"},{"lineNumber":41,"author":{"gitId":"hambot072"},"content":"                System.out.println(\"\\t\" + taskCounter + \".\" + taskList.get(i));","lastModifiedDate":"2022-04-15"},{"lineNumber":42,"author":{"gitId":"hambot072"},"content":"                taskCounter++;","lastModifiedDate":"2022-04-15"},{"lineNumber":43,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-04-15"},{"lineNumber":44,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":45,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":46,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":47,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":48,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input, creates a To-Do task.","lastModifiedDate":"2022-04-15"},{"lineNumber":49,"author":{"gitId":"hambot072"},"content":"     *","lastModifiedDate":"2022-04-17"},{"lineNumber":50,"author":{"gitId":"hambot072"},"content":"     * @param \"name of the task description\"","lastModifiedDate":"2022-04-17"},{"lineNumber":51,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":52,"author":{"gitId":"hambot072"},"content":"    public void createTodoTask(String taskDescription) {","lastModifiedDate":"2022-04-17"},{"lineNumber":53,"author":{"gitId":"hambot072"},"content":"        Task todo \u003d new Todo(taskDescription);","lastModifiedDate":"2022-04-17"},{"lineNumber":54,"author":{"gitId":"hambot072"},"content":"        taskList.add(todo);","lastModifiedDate":"2022-04-15"},{"lineNumber":55,"author":{"gitId":"hambot072"},"content":"        printAddedTask(todo);","lastModifiedDate":"2022-04-15"},{"lineNumber":56,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":57,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":58,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":59,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input and creates a Deadline task by taking every character before","lastModifiedDate":"2022-04-15"},{"lineNumber":60,"author":{"gitId":"hambot072"},"content":"     * \"/by\" as the description and everything after \"/by\" as the date and time. The date and time","lastModifiedDate":"2022-04-15"},{"lineNumber":61,"author":{"gitId":"hambot072"},"content":"     * is saved as LocalDateTime object.","lastModifiedDate":"2022-04-15"},{"lineNumber":62,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":63,"author":{"gitId":"hambot072"},"content":"    public void createDeadlineTask(String taskDescription, String dateTime) throws DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":64,"author":{"gitId":"hambot072"},"content":"        LocalDateTime date \u003d getDateTime(dateTime, \"/by\");","lastModifiedDate":"2022-04-17"},{"lineNumber":65,"author":{"gitId":"hambot072"},"content":"        Task deadline \u003d new Deadline(taskDescription.trim(), date);","lastModifiedDate":"2022-04-17"},{"lineNumber":66,"author":{"gitId":"hambot072"},"content":"        taskList.add(deadline);","lastModifiedDate":"2022-04-15"},{"lineNumber":67,"author":{"gitId":"hambot072"},"content":"        printAddedTask(deadline);","lastModifiedDate":"2022-04-15"},{"lineNumber":68,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":69,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":70,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":71,"author":{"gitId":"hambot072"},"content":"     * Takes in the input from the save file and creates a Deadline Task by taking everything","lastModifiedDate":"2022-04-15"},{"lineNumber":72,"author":{"gitId":"hambot072"},"content":"     * before \"(by:\" as the description and taking everything after \"by:\" as the date and time.","lastModifiedDate":"2022-04-15"},{"lineNumber":73,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":74,"author":{"gitId":"hambot072"},"content":"    public void createDeadlineTaskFromFile(String userInput) throws DukeException {","lastModifiedDate":"2022-04-15"},{"lineNumber":75,"author":{"gitId":"hambot072"},"content":"        //input from text file : deadline task by: 2022-04-10T12:00","lastModifiedDate":"2022-04-15"},{"lineNumber":76,"author":{"gitId":"hambot072"},"content":"        Matcher matcher \u003d Constant.DEADLINEFROMFILE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":77,"author":{"gitId":"hambot072"},"content":"        if (!matcher.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":78,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"\\t\" + \"Read error on event creation\");","lastModifiedDate":"2022-04-17"},{"lineNumber":79,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":80,"author":{"gitId":"hambot072"},"content":"        String dateTime \u003d matcher.group(2).trim();","lastModifiedDate":"2022-04-17"},{"lineNumber":81,"author":{"gitId":"hambot072"},"content":"        String tag \u003d \"\";","lastModifiedDate":"2022-04-17"},{"lineNumber":82,"author":{"gitId":"hambot072"},"content":"        if (matcher.group(2).contains(\"#\")) {","lastModifiedDate":"2022-04-17"},{"lineNumber":83,"author":{"gitId":"hambot072"},"content":"            Matcher tagExtract \u003d Constant.TAG_EXTRACT.matcher(matcher.group(2));","lastModifiedDate":"2022-04-17"},{"lineNumber":84,"author":{"gitId":"hambot072"},"content":"            if (!tagExtract.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":85,"author":{"gitId":"hambot072"},"content":"                throw new DukeException(\"\\t\" + \"Error reading tag on event creation\");","lastModifiedDate":"2022-04-17"},{"lineNumber":86,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-04-17"},{"lineNumber":87,"author":{"gitId":"hambot072"},"content":"            dateTime \u003d tagExtract.group(1).trim();","lastModifiedDate":"2022-04-17"},{"lineNumber":88,"author":{"gitId":"hambot072"},"content":"            tag \u003d tagExtract.group(2).trim();","lastModifiedDate":"2022-04-17"},{"lineNumber":89,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":90,"author":{"gitId":"hambot072"},"content":"        LocalDateTime date \u003d getDateTimeFromSaveFile(dateTime);","lastModifiedDate":"2022-04-17"},{"lineNumber":91,"author":{"gitId":"hambot072"},"content":"        Task deadline \u003d new Deadline(matcher.group(1).trim(), date);","lastModifiedDate":"2022-04-17"},{"lineNumber":92,"author":{"gitId":"hambot072"},"content":"        deadline.setTag(tag);","lastModifiedDate":"2022-04-17"},{"lineNumber":93,"author":{"gitId":"hambot072"},"content":"        taskList.add(deadline);","lastModifiedDate":"2022-04-15"},{"lineNumber":94,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":95,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":96,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":97,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input and creates an Event task by taking every character before","lastModifiedDate":"2022-04-15"},{"lineNumber":98,"author":{"gitId":"hambot072"},"content":"     * \"/at\" as the description and everything after \"/at\" as the date and time. The date and time","lastModifiedDate":"2022-04-15"},{"lineNumber":99,"author":{"gitId":"hambot072"},"content":"     * is saved as LocalDateTime object.","lastModifiedDate":"2022-04-15"},{"lineNumber":100,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":101,"author":{"gitId":"hambot072"},"content":"    public void createEventTask(String taskDescription, String dateTime) throws DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":102,"author":{"gitId":"hambot072"},"content":"        LocalDateTime date \u003d getDateTime(dateTime, \"/at\");","lastModifiedDate":"2022-04-17"},{"lineNumber":103,"author":{"gitId":"hambot072"},"content":"        Task event \u003d new Event(taskDescription.trim(), date);","lastModifiedDate":"2022-04-17"},{"lineNumber":104,"author":{"gitId":"hambot072"},"content":"        taskList.add(event);","lastModifiedDate":"2022-04-15"},{"lineNumber":105,"author":{"gitId":"hambot072"},"content":"        printAddedTask(event);","lastModifiedDate":"2022-04-15"},{"lineNumber":106,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":107,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":108,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":109,"author":{"gitId":"hambot072"},"content":"     * Takes in the input from the save file and creates an Event Task by taking everything","lastModifiedDate":"2022-04-15"},{"lineNumber":110,"author":{"gitId":"hambot072"},"content":"     * before \"(at:\" as the description and taking everything after \"(at:\" as the date and time.","lastModifiedDate":"2022-04-15"},{"lineNumber":111,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":112,"author":{"gitId":"hambot072"},"content":"    public void createEventTaskFromFile(String userInput) throws DukeException {","lastModifiedDate":"2022-04-15"},{"lineNumber":113,"author":{"gitId":"hambot072"},"content":"        //String name \u003d userInput.substring(0, userInput.indexOf(\"at:\") - 1);","lastModifiedDate":"2022-04-17"},{"lineNumber":114,"author":{"gitId":"hambot072"},"content":"        Matcher matcher \u003d Constant.EVENTFROMFILE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":115,"author":{"gitId":"hambot072"},"content":"        if (!matcher.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":116,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"\\t\" + \"Read error on event creation\");","lastModifiedDate":"2022-04-17"},{"lineNumber":117,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":118,"author":{"gitId":"hambot072"},"content":"        String dateTime \u003d matcher.group(2).trim();","lastModifiedDate":"2022-04-17"},{"lineNumber":119,"author":{"gitId":"hambot072"},"content":"        String tag \u003d \"\";","lastModifiedDate":"2022-04-17"},{"lineNumber":120,"author":{"gitId":"hambot072"},"content":"        if (matcher.group(2).contains(\"#\")) {","lastModifiedDate":"2022-04-17"},{"lineNumber":121,"author":{"gitId":"hambot072"},"content":"            Matcher tagExtract \u003d Constant.TAG_EXTRACT.matcher(matcher.group(2));","lastModifiedDate":"2022-04-17"},{"lineNumber":122,"author":{"gitId":"hambot072"},"content":"            if (!tagExtract.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":123,"author":{"gitId":"hambot072"},"content":"                throw new DukeException(\"\\t\" + \"Error reading tag on event creation\");","lastModifiedDate":"2022-04-17"},{"lineNumber":124,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-04-17"},{"lineNumber":125,"author":{"gitId":"hambot072"},"content":"            dateTime \u003d tagExtract.group(1).trim();","lastModifiedDate":"2022-04-17"},{"lineNumber":126,"author":{"gitId":"hambot072"},"content":"            tag \u003d tagExtract.group(2).trim();","lastModifiedDate":"2022-04-17"},{"lineNumber":127,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":128,"author":{"gitId":"hambot072"},"content":"        LocalDateTime date \u003d getDateTimeFromSaveFile(dateTime);","lastModifiedDate":"2022-04-17"},{"lineNumber":129,"author":{"gitId":"hambot072"},"content":"        Task event \u003d new Event(matcher.group(1).trim(), date);","lastModifiedDate":"2022-04-17"},{"lineNumber":130,"author":{"gitId":"hambot072"},"content":"        event.setTag(tag);","lastModifiedDate":"2022-04-17"},{"lineNumber":131,"author":{"gitId":"hambot072"},"content":"        taskList.add(event);","lastModifiedDate":"2022-04-15"},{"lineNumber":132,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":133,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":134,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":135,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input which will be \"delete [task number]\". It removes everything else","lastModifiedDate":"2022-04-15"},{"lineNumber":136,"author":{"gitId":"hambot072"},"content":"     * except for the number and converts it to an integer for accessing the array list to delete","lastModifiedDate":"2022-04-15"},{"lineNumber":137,"author":{"gitId":"hambot072"},"content":"     * the object specified.","lastModifiedDate":"2022-04-15"},{"lineNumber":138,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":139,"author":{"gitId":"hambot072"},"content":"    public void deleteTask(String taskNumber) throws IOException, DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":140,"author":{"gitId":"hambot072"},"content":"        int deleteIndex \u003d Integer.parseInt(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":141,"author":{"gitId":"hambot072"},"content":"        if(deleteIndex \u003e taskList.size() || deleteIndex \u003d\u003d 0){","lastModifiedDate":"2022-04-17"},{"lineNumber":142,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"I cannot find the task specified.\");","lastModifiedDate":"2022-04-17"},{"lineNumber":143,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":144,"author":{"gitId":"hambot072"},"content":"        System.out.println(\"\\t\" + \"This task has been removed: \" + \"\\n\" + \"\\t\" + taskList.get(deleteIndex - 1));","lastModifiedDate":"2022-04-17"},{"lineNumber":145,"author":{"gitId":"hambot072"},"content":"        taskList.remove(deleteIndex - 1);","lastModifiedDate":"2022-04-17"},{"lineNumber":146,"author":{"gitId":"hambot072"},"content":"        System.out.println(\"\\t\" + \"There are \" + taskList.size() + \" tasks in the list\");","lastModifiedDate":"2022-04-17"},{"lineNumber":147,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":148,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":149,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":150,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input, which will be \"mark [task number]\". It removes everything else","lastModifiedDate":"2022-04-15"},{"lineNumber":151,"author":{"gitId":"hambot072"},"content":"     * except for the number, converts it into an integer for accessing the object inside","lastModifiedDate":"2022-04-15"},{"lineNumber":152,"author":{"gitId":"hambot072"},"content":"     * the array list and set the isDone variable as true.","lastModifiedDate":"2022-04-15"},{"lineNumber":153,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":154,"author":{"gitId":"hambot072"},"content":"    public void markTaskAsDone(String taskNumber) throws DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":155,"author":{"gitId":"hambot072"},"content":"        int markIndex \u003d Integer.parseInt(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":156,"author":{"gitId":"hambot072"},"content":"        if (markIndex \u003d\u003d 0 || markIndex \u003e taskList.size()){","lastModifiedDate":"2022-04-17"},{"lineNumber":157,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"\\t\" + \"I cannot find the task specified.\");","lastModifiedDate":"2022-04-17"},{"lineNumber":158,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":159,"author":{"gitId":"hambot072"},"content":"        taskList.get(markIndex - 1).setStatus(true);","lastModifiedDate":"2022-04-17"},{"lineNumber":160,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":161,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":162,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":163,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input, which will be \"unmark [task number]\". It removes everything else","lastModifiedDate":"2022-04-15"},{"lineNumber":164,"author":{"gitId":"hambot072"},"content":"     * except for the number, converts it into an integer for accessing the object inside the","lastModifiedDate":"2022-04-15"},{"lineNumber":165,"author":{"gitId":"hambot072"},"content":"     * array list and sets the isDone variable as false.","lastModifiedDate":"2022-04-15"},{"lineNumber":166,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":167,"author":{"gitId":"hambot072"},"content":"    public void markTaskAsNotDone(String taskNumber) throws DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":168,"author":{"gitId":"hambot072"},"content":"        int markIndex \u003d Integer.parseInt(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":169,"author":{"gitId":"hambot072"},"content":"        if (markIndex \u003d\u003d 0 || markIndex \u003e taskList.size()){","lastModifiedDate":"2022-04-17"},{"lineNumber":170,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"\\t\" + \"I cannot find the task specified.\");","lastModifiedDate":"2022-04-17"},{"lineNumber":171,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":172,"author":{"gitId":"hambot072"},"content":"        taskList.get(markIndex - 1).setStatus(false);","lastModifiedDate":"2022-04-17"},{"lineNumber":173,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":174,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":175,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":176,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input, which will be \"tag [task number] [tag content]\". It removes \"tag \"","lastModifiedDate":"2022-04-15"},{"lineNumber":177,"author":{"gitId":"hambot072"},"content":"     * and String variables takes in the number and the tag content. The number is converted into","lastModifiedDate":"2022-04-15"},{"lineNumber":178,"author":{"gitId":"hambot072"},"content":"     * an integer for accessing the object inside the array list and the tag content is placed in","lastModifiedDate":"2022-04-15"},{"lineNumber":179,"author":{"gitId":"hambot072"},"content":"     * as an argument for the isTagged variable.","lastModifiedDate":"2022-04-15"},{"lineNumber":180,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":181,"author":{"gitId":"hambot072"},"content":"    public void addTag(String taskNumber, String tagContent) throws DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":182,"author":{"gitId":"hambot072"},"content":"        //input : tag 13 fun","lastModifiedDate":"2022-04-17"},{"lineNumber":183,"author":{"gitId":"hambot072"},"content":"        int taskIndex \u003d Integer.parseInt(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":184,"author":{"gitId":"hambot072"},"content":"        if (taskIndex \u003d\u003d 0 || taskIndex \u003e taskList.size()){","lastModifiedDate":"2022-04-17"},{"lineNumber":185,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"\\t\" + \"I cannot find the task specified.\");","lastModifiedDate":"2022-04-17"},{"lineNumber":186,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":187,"author":{"gitId":"hambot072"},"content":"        taskList.get(Integer.parseInt(taskNumber) - 1).setTag(tagContent);","lastModifiedDate":"2022-04-15"},{"lineNumber":188,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":189,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":190,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":191,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input, which will be \"untag [task number]\". It removes \"untag \" leaving the","lastModifiedDate":"2022-04-15"},{"lineNumber":192,"author":{"gitId":"hambot072"},"content":"     * [task number]. The number is converted into an integer for accessing the object inside the","lastModifiedDate":"2022-04-15"},{"lineNumber":193,"author":{"gitId":"hambot072"},"content":"     * array list and the tag content is placed in as an argument for the isTagged variable.","lastModifiedDate":"2022-04-15"},{"lineNumber":194,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":195,"author":{"gitId":"hambot072"},"content":"    public void unTag(String taskNumber) throws DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":196,"author":{"gitId":"hambot072"},"content":"        //input : untag 1","lastModifiedDate":"2022-04-15"},{"lineNumber":197,"author":{"gitId":"hambot072"},"content":"        int tagIndex \u003d Integer.parseInt(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":198,"author":{"gitId":"hambot072"},"content":"        if (tagIndex \u003d\u003d 0 || tagIndex \u003e taskList.size()){","lastModifiedDate":"2022-04-17"},{"lineNumber":199,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"\\t\" + \"I cannot find the task specified.\");","lastModifiedDate":"2022-04-17"},{"lineNumber":200,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":201,"author":{"gitId":"hambot072"},"content":"        taskList.get(tagIndex - 1).clearTag();","lastModifiedDate":"2022-04-17"},{"lineNumber":202,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":203,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":204,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":205,"author":{"gitId":"hambot072"},"content":"     * Takes in the user input, which will be \"find [keyword]\". It removes \"find \" leaving the","lastModifiedDate":"2022-04-15"},{"lineNumber":206,"author":{"gitId":"hambot072"},"content":"     * [keyword]. The for loop will iterate through the array list and checks the description of","lastModifiedDate":"2022-04-15"},{"lineNumber":207,"author":{"gitId":"hambot072"},"content":"     * each task for the keyword. If the keyword is present, it prints out the task.","lastModifiedDate":"2022-04-15"},{"lineNumber":208,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":209,"author":{"gitId":"hambot072"},"content":"    public void findTask(String userInput) {","lastModifiedDate":"2022-04-15"},{"lineNumber":210,"author":{"gitId":"hambot072"},"content":"        //input : find book","lastModifiedDate":"2022-04-15"},{"lineNumber":211,"author":{"gitId":"hambot072"},"content":"        int findCounter \u003d 1;","lastModifiedDate":"2022-04-15"},{"lineNumber":212,"author":{"gitId":"hambot072"},"content":"        assert findCounter \u003d\u003d 1 : \"List numbering is wrong\";","lastModifiedDate":"2022-04-15"},{"lineNumber":213,"author":{"gitId":"hambot072"},"content":"        System.out.print(\"\\t\" + \"Here are the tasks you searched for: \" + \"\\n\");","lastModifiedDate":"2022-04-15"},{"lineNumber":214,"author":{"gitId":"hambot072"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-04-15"},{"lineNumber":215,"author":{"gitId":"hambot072"},"content":"            if (taskList.get(i).getDescription().contains(userInput)) {","lastModifiedDate":"2022-04-15"},{"lineNumber":216,"author":{"gitId":"hambot072"},"content":"                System.out.print(\"\\t\" + findCounter + \".\" + taskList.get(i) + \"\\n\");","lastModifiedDate":"2022-04-15"},{"lineNumber":217,"author":{"gitId":"hambot072"},"content":"                findCounter++;","lastModifiedDate":"2022-04-15"},{"lineNumber":218,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-04-15"},{"lineNumber":219,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":220,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":221,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":222,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":223,"author":{"gitId":"hambot072"},"content":"     * Prints the task that was added as well as the total number of tasks in the list.","lastModifiedDate":"2022-04-15"},{"lineNumber":224,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":225,"author":{"gitId":"hambot072"},"content":"    public void printAddedTask(Task task) {","lastModifiedDate":"2022-04-15"},{"lineNumber":226,"author":{"gitId":"hambot072"},"content":"        System.out.println(\"\\t\" + \"This task has been added: \" + \"\\n\" + \"\\t\" + task);","lastModifiedDate":"2022-04-15"},{"lineNumber":227,"author":{"gitId":"hambot072"},"content":"        System.out.println(\"\\t\" + \"There are \" + taskList.size() + \" tasks in the list\");","lastModifiedDate":"2022-04-17"},{"lineNumber":228,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":229,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":230,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":231,"author":{"gitId":"hambot072"},"content":"     * This method takes in the string from the createDeadlineTask and createEventTask methods","lastModifiedDate":"2022-04-15"},{"lineNumber":232,"author":{"gitId":"hambot072"},"content":"     * after \"deadline \" or \"event \" has been removed and the start","lastModifiedDate":"2022-04-15"},{"lineNumber":233,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":234,"author":{"gitId":"hambot072"},"content":"    private LocalDateTime getDateTime(String userInput, String str) throws DukeException {","lastModifiedDate":"2022-04-15"},{"lineNumber":235,"author":{"gitId":"hambot072"},"content":"        Matcher matcher \u003d Constant.DATE.matcher(userInput.substring(userInput.indexOf(str)));","lastModifiedDate":"2022-04-15"},{"lineNumber":236,"author":{"gitId":"hambot072"},"content":"        if (!matcher.matches() || matcher.group(1).isEmpty()) {","lastModifiedDate":"2022-04-17"},{"lineNumber":237,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(Constant.DATE_TIME_CANNOT_BE_FOUND);","lastModifiedDate":"2022-04-15"},{"lineNumber":238,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":239,"author":{"gitId":"hambot072"},"content":"        try{","lastModifiedDate":"2022-04-17"},{"lineNumber":240,"author":{"gitId":"hambot072"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2022-04-15"},{"lineNumber":241,"author":{"gitId":"hambot072"},"content":"            return LocalDateTime.parse(matcher.group(1), formatter);","lastModifiedDate":"2022-04-15"},{"lineNumber":242,"author":{"gitId":"hambot072"},"content":"        } catch (Exception e){","lastModifiedDate":"2022-04-17"},{"lineNumber":243,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"\\t\" + \"Invalid date and time, please input in this format yyyy-MM-dd HH:mm\");","lastModifiedDate":"2022-04-17"},{"lineNumber":244,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":245,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":246,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":247,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":248,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":249,"author":{"gitId":"hambot072"},"content":"     * This method takes in the string from the createDeadlineTaskFromFile and createEventTaskFromFile","lastModifiedDate":"2022-04-15"},{"lineNumber":250,"author":{"gitId":"hambot072"},"content":"     * methods and reads the date and time to create the LocalDateTime object for object creation in","lastModifiedDate":"2022-04-15"},{"lineNumber":251,"author":{"gitId":"hambot072"},"content":"     * the array list.","lastModifiedDate":"2022-04-15"},{"lineNumber":252,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":253,"author":{"gitId":"hambot072"},"content":"    private LocalDateTime getDateTimeFromSaveFile(String userInput) throws DukeException {","lastModifiedDate":"2022-04-17"},{"lineNumber":254,"author":{"gitId":"hambot072"},"content":"        try{","lastModifiedDate":"2022-04-17"},{"lineNumber":255,"author":{"gitId":"hambot072"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\");","lastModifiedDate":"2022-04-15"},{"lineNumber":256,"author":{"gitId":"hambot072"},"content":"            return LocalDateTime.parse(userInput, formatter);","lastModifiedDate":"2022-04-17"},{"lineNumber":257,"author":{"gitId":"hambot072"},"content":"        } catch(Exception e) {","lastModifiedDate":"2022-04-17"},{"lineNumber":258,"author":{"gitId":"hambot072"},"content":"            throw new DukeException(\"\\t\" + \"Invalid date and time, please input in this format yyyy-MM-dd\u0027T\u0027HH:mm\");","lastModifiedDate":"2022-04-17"},{"lineNumber":259,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":260,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":261,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":262,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":262}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"import java.io.IOException;","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"public class TaskManager {","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"    private final Scanner userInputScanner;","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"    private Storage saveFile;","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"    public TaskManager(final Storage storage) {","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":"        userInputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":"        saveFile \u003d storage;","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"    private boolean validateUserInput(final String line) {","lastModifiedDate":"2022-04-17"},{"lineNumber":19,"author":{"gitId":"hambot072"},"content":"        switch (line) {","lastModifiedDate":"2022-04-15"},{"lineNumber":20,"author":{"gitId":"hambot072"},"content":"            case \"todo \":","lastModifiedDate":"2022-04-15"},{"lineNumber":21,"author":{"gitId":"hambot072"},"content":"                System.out.println(Constant.TODO_CANNOT_BE_EMPTY);","lastModifiedDate":"2022-04-17"},{"lineNumber":22,"author":{"gitId":"hambot072"},"content":"                return false;","lastModifiedDate":"2022-04-17"},{"lineNumber":23,"author":{"gitId":"hambot072"},"content":"            case \"deadline \":","lastModifiedDate":"2022-04-15"},{"lineNumber":24,"author":{"gitId":"hambot072"},"content":"                System.out.println(Constant.DEADLINE_CANNOT_BE_EMPTY);","lastModifiedDate":"2022-04-17"},{"lineNumber":25,"author":{"gitId":"hambot072"},"content":"                return false;","lastModifiedDate":"2022-04-17"},{"lineNumber":26,"author":{"gitId":"hambot072"},"content":"            case \"event \":","lastModifiedDate":"2022-04-15"},{"lineNumber":27,"author":{"gitId":"hambot072"},"content":"                System.out.println(Constant.EVENT_CANNOT_BE_EMPTY);","lastModifiedDate":"2022-04-17"},{"lineNumber":28,"author":{"gitId":"hambot072"},"content":"                return false;","lastModifiedDate":"2022-04-17"},{"lineNumber":29,"author":{"gitId":"hambot072"},"content":"            case \"tag \":","lastModifiedDate":"2022-04-15"},{"lineNumber":30,"author":{"gitId":"hambot072"},"content":"                System.out.println(Constant.TASKTAG_CANNOT_BE_EMPTY);","lastModifiedDate":"2022-04-17"},{"lineNumber":31,"author":{"gitId":"hambot072"},"content":"                return false;","lastModifiedDate":"2022-04-17"},{"lineNumber":32,"author":{"gitId":"hambot072"},"content":"            case \"untag \":","lastModifiedDate":"2022-04-15"},{"lineNumber":33,"author":{"gitId":"hambot072"},"content":"                System.out.println(Constant.UNTAG_CANNOT_BE_EMPTY);","lastModifiedDate":"2022-04-17"},{"lineNumber":34,"author":{"gitId":"hambot072"},"content":"                return false;","lastModifiedDate":"2022-04-17"},{"lineNumber":35,"author":{"gitId":"hambot072"},"content":"            case \"delete \":","lastModifiedDate":"2022-04-15"},{"lineNumber":36,"author":{"gitId":"hambot072"},"content":"                System.out.println(Constant.DELETE_CANNOT_BE_EMPTY);","lastModifiedDate":"2022-04-17"},{"lineNumber":37,"author":{"gitId":"hambot072"},"content":"                return false;","lastModifiedDate":"2022-04-17"},{"lineNumber":38,"author":{"gitId":"hambot072"},"content":"            default:","lastModifiedDate":"2022-04-17"},{"lineNumber":39,"author":{"gitId":"hambot072"},"content":"                return true;","lastModifiedDate":"2022-04-17"},{"lineNumber":40,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":41,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":42,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":43,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":44,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":45,"author":{"gitId":"hambot072"},"content":"     * This method calls the tasklist method to create a To-do task from the user input.","lastModifiedDate":"2022-04-15"},{"lineNumber":46,"author":{"gitId":"hambot072"},"content":"     * Then it prints the arraylist into the text file.","lastModifiedDate":"2022-04-15"},{"lineNumber":47,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":48,"author":{"gitId":"hambot072"},"content":"    public void createTodoTask(String taskDescription) {","lastModifiedDate":"2022-04-17"},{"lineNumber":49,"author":{"gitId":"hambot072"},"content":"        taskList.createTodoTask(taskDescription);","lastModifiedDate":"2022-04-17"},{"lineNumber":50,"author":{"gitId":"hambot072"},"content":"        saveFile.saveFile(taskList.getTaskList());","lastModifiedDate":"2022-04-15"},{"lineNumber":51,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":52,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":53,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":54,"author":{"gitId":"hambot072"},"content":"     * This method calls the tasklist method to create a Deadline task from the user input.","lastModifiedDate":"2022-04-15"},{"lineNumber":55,"author":{"gitId":"hambot072"},"content":"     * Then it prints the arraylist into the text file.","lastModifiedDate":"2022-04-15"},{"lineNumber":56,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":57,"author":{"gitId":"hambot072"},"content":"    public void createDeadlineTask(String taskDescription, String dateTime) {","lastModifiedDate":"2022-04-17"},{"lineNumber":58,"author":{"gitId":"hambot072"},"content":"        try {","lastModifiedDate":"2022-04-15"},{"lineNumber":59,"author":{"gitId":"hambot072"},"content":"            taskList.createDeadlineTask(taskDescription, dateTime);","lastModifiedDate":"2022-04-17"},{"lineNumber":60,"author":{"gitId":"hambot072"},"content":"            saveFile.saveFile(taskList.getTaskList());","lastModifiedDate":"2022-04-17"},{"lineNumber":61,"author":{"gitId":"hambot072"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-04-15"},{"lineNumber":62,"author":{"gitId":"hambot072"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-04-17"},{"lineNumber":63,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":64,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":65,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":66,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":67,"author":{"gitId":"hambot072"},"content":"     * This method calls the tasklist method to create an Event task from the user input.","lastModifiedDate":"2022-04-15"},{"lineNumber":68,"author":{"gitId":"hambot072"},"content":"     * Then it prints the arraylist into the text file.","lastModifiedDate":"2022-04-15"},{"lineNumber":69,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":70,"author":{"gitId":"hambot072"},"content":"    public void createEventTask(String taskDescription, String dateTime) {","lastModifiedDate":"2022-04-17"},{"lineNumber":71,"author":{"gitId":"hambot072"},"content":"        try {","lastModifiedDate":"2022-04-15"},{"lineNumber":72,"author":{"gitId":"hambot072"},"content":"            taskList.createEventTask(taskDescription,dateTime);","lastModifiedDate":"2022-04-17"},{"lineNumber":73,"author":{"gitId":"hambot072"},"content":"            saveFile.saveFile(taskList.getTaskList());","lastModifiedDate":"2022-04-17"},{"lineNumber":74,"author":{"gitId":"hambot072"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-04-15"},{"lineNumber":75,"author":{"gitId":"hambot072"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-04-17"},{"lineNumber":76,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":77,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":78,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":79,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":80,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":81,"author":{"gitId":"hambot072"},"content":"     * This method calls the tasklist method to delete a specific task referenced from the user input.","lastModifiedDate":"2022-04-15"},{"lineNumber":82,"author":{"gitId":"hambot072"},"content":"     * Then it prints the arraylist into the text file.","lastModifiedDate":"2022-04-15"},{"lineNumber":83,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":84,"author":{"gitId":"hambot072"},"content":"    public void deleteTask(String taskNumber) {","lastModifiedDate":"2022-04-17"},{"lineNumber":85,"author":{"gitId":"hambot072"},"content":"        try {","lastModifiedDate":"2022-04-15"},{"lineNumber":86,"author":{"gitId":"hambot072"},"content":"            taskList.deleteTask(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":87,"author":{"gitId":"hambot072"},"content":"            saveFile.saveFile(taskList.getTaskList());","lastModifiedDate":"2022-04-15"},{"lineNumber":88,"author":{"gitId":"hambot072"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2022-04-17"},{"lineNumber":89,"author":{"gitId":"hambot072"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-04-17"},{"lineNumber":90,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":91,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":92,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":93,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":94,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":95,"author":{"gitId":"hambot072"},"content":"     * This method calls the tasklist method to mark a specific task referenced from the user input.","lastModifiedDate":"2022-04-15"},{"lineNumber":96,"author":{"gitId":"hambot072"},"content":"     * The isDone variable in the referenced Tasklist object is set to true.","lastModifiedDate":"2022-04-15"},{"lineNumber":97,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":98,"author":{"gitId":"hambot072"},"content":"    public void markTaskAsDone(String taskNumber) {","lastModifiedDate":"2022-04-17"},{"lineNumber":99,"author":{"gitId":"hambot072"},"content":"        try {","lastModifiedDate":"2022-04-17"},{"lineNumber":100,"author":{"gitId":"hambot072"},"content":"            taskList.markTaskAsDone(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":101,"author":{"gitId":"hambot072"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-04-17"},{"lineNumber":102,"author":{"gitId":"hambot072"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-04-17"},{"lineNumber":103,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":104,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":105,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":106,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":107,"author":{"gitId":"hambot072"},"content":"     * This method calls the tasklist method to mark a specific task referenced from the user input.","lastModifiedDate":"2022-04-15"},{"lineNumber":108,"author":{"gitId":"hambot072"},"content":"     * The isDone variable in the referenced Tasklist object is set to false.","lastModifiedDate":"2022-04-15"},{"lineNumber":109,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":110,"author":{"gitId":"hambot072"},"content":"    public void markTaskAsNotDone(String taskNumber) {","lastModifiedDate":"2022-04-17"},{"lineNumber":111,"author":{"gitId":"hambot072"},"content":"        try {","lastModifiedDate":"2022-04-17"},{"lineNumber":112,"author":{"gitId":"hambot072"},"content":"            taskList.markTaskAsNotDone(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":113,"author":{"gitId":"hambot072"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-04-17"},{"lineNumber":114,"author":{"gitId":"hambot072"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-04-17"},{"lineNumber":115,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-17"},{"lineNumber":116,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":117,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":118,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":119,"author":{"gitId":"hambot072"},"content":"     * This method calls the tasklist method to change the tag variable in the referenced Tasklist object from the user input.","lastModifiedDate":"2022-04-15"},{"lineNumber":120,"author":{"gitId":"hambot072"},"content":"     * The tag variable is set to the user input. Then it prints the arraylist into the text file.","lastModifiedDate":"2022-04-15"},{"lineNumber":121,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":122,"author":{"gitId":"hambot072"},"content":"    public void addTag(String taskNumber, String tagContent) {","lastModifiedDate":"2022-04-17"},{"lineNumber":123,"author":{"gitId":"hambot072"},"content":"        try {","lastModifiedDate":"2022-04-15"},{"lineNumber":124,"author":{"gitId":"hambot072"},"content":"            taskList.addTag(taskNumber, tagContent);","lastModifiedDate":"2022-04-17"},{"lineNumber":125,"author":{"gitId":"hambot072"},"content":"            saveFile.saveFile(taskList.getTaskList());","lastModifiedDate":"2022-04-17"},{"lineNumber":126,"author":{"gitId":"hambot072"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-04-15"},{"lineNumber":127,"author":{"gitId":"hambot072"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-04-17"},{"lineNumber":128,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":129,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":130,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":131,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":132,"author":{"gitId":"hambot072"},"content":"    /**","lastModifiedDate":"2022-04-15"},{"lineNumber":133,"author":{"gitId":"hambot072"},"content":"     * This method calls the tasklist method to change the tag variable in the referenced Tasklist object from the user input.","lastModifiedDate":"2022-04-15"},{"lineNumber":134,"author":{"gitId":"hambot072"},"content":"     * The tag variable is set to a blank string. Then it prints the arraylist into the text file.","lastModifiedDate":"2022-04-15"},{"lineNumber":135,"author":{"gitId":"hambot072"},"content":"     */","lastModifiedDate":"2022-04-15"},{"lineNumber":136,"author":{"gitId":"hambot072"},"content":"    public void unTag(String taskNumber) {","lastModifiedDate":"2022-04-17"},{"lineNumber":137,"author":{"gitId":"hambot072"},"content":"        try {","lastModifiedDate":"2022-04-15"},{"lineNumber":138,"author":{"gitId":"hambot072"},"content":"            taskList.unTag(taskNumber);","lastModifiedDate":"2022-04-17"},{"lineNumber":139,"author":{"gitId":"hambot072"},"content":"            saveFile.saveFile(taskList.getTaskList());","lastModifiedDate":"2022-04-17"},{"lineNumber":140,"author":{"gitId":"hambot072"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-04-15"},{"lineNumber":141,"author":{"gitId":"hambot072"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-04-17"},{"lineNumber":142,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":143,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":144,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":145,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":146,"author":{"gitId":"hambot072"},"content":"    public void findTask(String userInput) {","lastModifiedDate":"2022-04-15"},{"lineNumber":147,"author":{"gitId":"hambot072"},"content":"        taskList.findTask(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":148,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":149,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":150,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":151,"author":{"gitId":"hambot072"},"content":"    public void run() throws DukeException, FileNotFoundException {","lastModifiedDate":"2022-04-17"},{"lineNumber":152,"author":{"gitId":"hambot072"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2022-04-15"},{"lineNumber":153,"author":{"gitId":"hambot072"},"content":"        taskList \u003d saveFile.createArrayList();","lastModifiedDate":"2022-04-15"},{"lineNumber":154,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":155,"author":{"gitId":"hambot072"},"content":"        while (!userInput.contains(\"bye\")) {","lastModifiedDate":"2022-04-15"},{"lineNumber":156,"author":{"gitId":"hambot072"},"content":"            System.out.print(\"What can I do for you: \");","lastModifiedDate":"2022-04-15"},{"lineNumber":157,"author":{"gitId":"hambot072"},"content":"            userInput \u003d userInputScanner.nextLine();","lastModifiedDate":"2022-04-15"},{"lineNumber":158,"author":{"gitId":"hambot072"},"content":"            Matcher mark \u003d Constant.MARK.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":159,"author":{"gitId":"hambot072"},"content":"            Matcher unmark \u003d Constant.UNMARKED.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":160,"author":{"gitId":"hambot072"},"content":"            Matcher todo \u003d Constant.TODO.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":161,"author":{"gitId":"hambot072"},"content":"            Matcher deadline \u003d Constant.DEADLINE.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":162,"author":{"gitId":"hambot072"},"content":"            Matcher event \u003d Constant.EVENT.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":163,"author":{"gitId":"hambot072"},"content":"            Matcher delete \u003d Constant.DELETE.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":164,"author":{"gitId":"hambot072"},"content":"            Matcher tag \u003d Constant.TAG.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":165,"author":{"gitId":"hambot072"},"content":"            Matcher untag \u003d Constant.UNTAG.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":166,"author":{"gitId":"hambot072"},"content":"            Matcher find \u003d Constant.FIND.matcher(userInput);","lastModifiedDate":"2022-04-15"},{"lineNumber":167,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":168,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":169,"author":{"gitId":"hambot072"},"content":"            if (validateUserInput(userInput)) {","lastModifiedDate":"2022-04-17"},{"lineNumber":170,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":171,"author":{"gitId":"hambot072"},"content":"                if (userInput.equals(\"bye\")) {","lastModifiedDate":"2022-04-15"},{"lineNumber":172,"author":{"gitId":"hambot072"},"content":"                    System.out.print(\"\\tGood day and good bye\");","lastModifiedDate":"2022-04-15"},{"lineNumber":173,"author":{"gitId":"hambot072"},"content":"                    break;","lastModifiedDate":"2022-04-15"},{"lineNumber":174,"author":{"gitId":"hambot072"},"content":"                }","lastModifiedDate":"2022-04-15"},{"lineNumber":175,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":176,"author":{"gitId":"hambot072"},"content":"                try{","lastModifiedDate":"2022-04-17"},{"lineNumber":177,"author":{"gitId":"hambot072"},"content":"                    if (userInput.equals(\"list\")) {","lastModifiedDate":"2022-04-15"},{"lineNumber":178,"author":{"gitId":"hambot072"},"content":"                        taskList.displayList();","lastModifiedDate":"2022-04-15"},{"lineNumber":179,"author":{"gitId":"hambot072"},"content":"                    } else {","lastModifiedDate":"2022-04-15"},{"lineNumber":180,"author":{"gitId":"hambot072"},"content":"                        if (mark.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":181,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.MARK_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":182,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":183,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for mark function\");","lastModifiedDate":"2022-04-17"},{"lineNumber":184,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":185,"author":{"gitId":"hambot072"},"content":"                            markTaskAsDone(matcher.group(1));","lastModifiedDate":"2022-04-17"},{"lineNumber":186,"author":{"gitId":"hambot072"},"content":"                        } else if (unmark.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":187,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.UNMARK_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":188,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":189,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for unmark function\");","lastModifiedDate":"2022-04-17"},{"lineNumber":190,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":191,"author":{"gitId":"hambot072"},"content":"                            markTaskAsNotDone(matcher.group(1));","lastModifiedDate":"2022-04-17"},{"lineNumber":192,"author":{"gitId":"hambot072"},"content":"                        } else if (todo.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":193,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.TODO_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":194,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches() || matcher.group(1).isEmpty()){","lastModifiedDate":"2022-04-17"},{"lineNumber":195,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for todo task\");","lastModifiedDate":"2022-04-17"},{"lineNumber":196,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":197,"author":{"gitId":"hambot072"},"content":"                            createTodoTask(matcher.group(1));","lastModifiedDate":"2022-04-17"},{"lineNumber":198,"author":{"gitId":"hambot072"},"content":"                        } else if (deadline.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":199,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.DEADLINE_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":200,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches() || matcher.group(1).isEmpty()){","lastModifiedDate":"2022-04-17"},{"lineNumber":201,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for deadline task\");","lastModifiedDate":"2022-04-17"},{"lineNumber":202,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":203,"author":{"gitId":"hambot072"},"content":"                            createDeadlineTask(matcher.group(1), matcher.group(2));","lastModifiedDate":"2022-04-17"},{"lineNumber":204,"author":{"gitId":"hambot072"},"content":"                        } else if (event.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":205,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.EVENT_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":206,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches() || matcher.group(1).isEmpty()){","lastModifiedDate":"2022-04-17"},{"lineNumber":207,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for event task\");","lastModifiedDate":"2022-04-17"},{"lineNumber":208,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":209,"author":{"gitId":"hambot072"},"content":"                            createEventTask(matcher.group(1), matcher.group(2));","lastModifiedDate":"2022-04-17"},{"lineNumber":210,"author":{"gitId":"hambot072"},"content":"                        } else if (delete.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":211,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.DELETE_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":212,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":213,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for delete function\");","lastModifiedDate":"2022-04-17"},{"lineNumber":214,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":215,"author":{"gitId":"hambot072"},"content":"                            deleteTask(matcher.group(1));","lastModifiedDate":"2022-04-17"},{"lineNumber":216,"author":{"gitId":"hambot072"},"content":"                        } else if (tag.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":217,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.TAG_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":218,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches() || matcher.group(2).isEmpty()){","lastModifiedDate":"2022-04-17"},{"lineNumber":219,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for tag function\");","lastModifiedDate":"2022-04-17"},{"lineNumber":220,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":221,"author":{"gitId":"hambot072"},"content":"                            addTag(matcher.group(1), matcher.group(2));","lastModifiedDate":"2022-04-17"},{"lineNumber":222,"author":{"gitId":"hambot072"},"content":"                        } else if (untag.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":223,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.UNTAG_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":224,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches()){","lastModifiedDate":"2022-04-17"},{"lineNumber":225,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for untag function\");","lastModifiedDate":"2022-04-17"},{"lineNumber":226,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":227,"author":{"gitId":"hambot072"},"content":"                            unTag(matcher.group(1));","lastModifiedDate":"2022-04-17"},{"lineNumber":228,"author":{"gitId":"hambot072"},"content":"                        } else if (find.matches()) {","lastModifiedDate":"2022-04-15"},{"lineNumber":229,"author":{"gitId":"hambot072"},"content":"                            Matcher matcher \u003d Constant.FIND_VALIDATE.matcher(userInput);","lastModifiedDate":"2022-04-17"},{"lineNumber":230,"author":{"gitId":"hambot072"},"content":"                            if (!matcher.matches() || matcher.group(1).isEmpty()){","lastModifiedDate":"2022-04-17"},{"lineNumber":231,"author":{"gitId":"hambot072"},"content":"                                throw new DukeException(\"\\t\" + \"Missing arguments for find function\");","lastModifiedDate":"2022-04-17"},{"lineNumber":232,"author":{"gitId":"hambot072"},"content":"                            }","lastModifiedDate":"2022-04-17"},{"lineNumber":233,"author":{"gitId":"hambot072"},"content":"                            findTask(matcher.group(1));","lastModifiedDate":"2022-04-17"},{"lineNumber":234,"author":{"gitId":"hambot072"},"content":"                        } else {","lastModifiedDate":"2022-04-15"},{"lineNumber":235,"author":{"gitId":"hambot072"},"content":"                            System.out.println(\"\\t\" + \"Sorry I don\u0027t understand what you mean.\");","lastModifiedDate":"2022-04-17"},{"lineNumber":236,"author":{"gitId":"hambot072"},"content":"                        }","lastModifiedDate":"2022-04-17"},{"lineNumber":237,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-17"},{"lineNumber":238,"author":{"gitId":"hambot072"},"content":"                    }","lastModifiedDate":"2022-04-17"},{"lineNumber":239,"author":{"gitId":"hambot072"},"content":"                }","lastModifiedDate":"2022-04-17"},{"lineNumber":240,"author":{"gitId":"hambot072"},"content":"                catch (DukeException e){","lastModifiedDate":"2022-04-17"},{"lineNumber":241,"author":{"gitId":"hambot072"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2022-04-17"},{"lineNumber":242,"author":{"gitId":"hambot072"},"content":"                }","lastModifiedDate":"2022-04-15"},{"lineNumber":243,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":244,"author":{"gitId":"hambot072"},"content":"            }","lastModifiedDate":"2022-04-15"},{"lineNumber":245,"author":{"gitId":"hambot072"},"content":"        }","lastModifiedDate":"2022-04-15"},{"lineNumber":246,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":247,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":248,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":248}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"import Task.*;","lastModifiedDate":"2022-04-15"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-04-15"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"import java.io.IOException;","lastModifiedDate":"2022-04-15"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-04-15"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"public class TodoTest {","lastModifiedDate":"2022-04-15"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"    @Test","lastModifiedDate":"2022-04-15"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"    public void TodoTest() {","lastModifiedDate":"2022-04-15"},{"lineNumber":11,"author":{"gitId":"hambot072"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":12,"author":{"gitId":"hambot072"},"content":"        taskList.createTodoTask(\"todo read book\");","lastModifiedDate":"2022-04-15"},{"lineNumber":13,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":14,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":15,"author":{"gitId":"hambot072"},"content":"    @Test","lastModifiedDate":"2022-04-15"},{"lineNumber":16,"author":{"gitId":"hambot072"},"content":"    public void DeadlineTest() throws DukeException {","lastModifiedDate":"2022-04-15"},{"lineNumber":17,"author":{"gitId":"hambot072"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":18,"author":{"gitId":"hambot072"},"content":"        taskList.createDeadlineTask(\"return book \", \"/by 2022-04-10 12:00\");","lastModifiedDate":"2022-04-17"},{"lineNumber":19,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":20,"author":{"gitId":"hambot072"},"content":"    @Test","lastModifiedDate":"2022-04-15"},{"lineNumber":21,"author":{"gitId":"hambot072"},"content":"    public void EventTest() throws DukeException {","lastModifiedDate":"2022-04-15"},{"lineNumber":22,"author":{"gitId":"hambot072"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":23,"author":{"gitId":"hambot072"},"content":"        taskList.createEventTask(\"event walk the plank \", \"/at 2022-03-21 23:14\");","lastModifiedDate":"2022-04-17"},{"lineNumber":24,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":25,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":26,"author":{"gitId":"hambot072"},"content":"    @Test","lastModifiedDate":"2022-04-15"},{"lineNumber":27,"author":{"gitId":"hambot072"},"content":"    public void DeleteTest() throws DukeException, IOException {","lastModifiedDate":"2022-04-15"},{"lineNumber":28,"author":{"gitId":"hambot072"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":29,"author":{"gitId":"hambot072"},"content":"        taskList.createTodoTask(\"todo read book\");","lastModifiedDate":"2022-04-15"},{"lineNumber":30,"author":{"gitId":"hambot072"},"content":"        taskList.deleteTask(\"delete 1\");","lastModifiedDate":"2022-04-15"},{"lineNumber":31,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":32,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":33,"author":{"gitId":"hambot072"},"content":"    @Test","lastModifiedDate":"2022-04-15"},{"lineNumber":34,"author":{"gitId":"hambot072"},"content":"    public void MarkDoneNotDoneTest() throws DukeException, IOException {","lastModifiedDate":"2022-04-15"},{"lineNumber":35,"author":{"gitId":"hambot072"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":36,"author":{"gitId":"hambot072"},"content":"        taskList.createTodoTask(\"todo read book\");","lastModifiedDate":"2022-04-15"},{"lineNumber":37,"author":{"gitId":"hambot072"},"content":"        taskList.markTaskAsDone(\"mark 1\");","lastModifiedDate":"2022-04-15"},{"lineNumber":38,"author":{"gitId":"hambot072"},"content":"        taskList.markTaskAsNotDone(\"unmark 1\");","lastModifiedDate":"2022-04-15"},{"lineNumber":39,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":40,"author":{"gitId":"hambot072"},"content":"","lastModifiedDate":"2022-04-15"},{"lineNumber":41,"author":{"gitId":"hambot072"},"content":"    @Test","lastModifiedDate":"2022-04-15"},{"lineNumber":42,"author":{"gitId":"hambot072"},"content":"    public void TagTest() throws DukeException, IOException {","lastModifiedDate":"2022-04-15"},{"lineNumber":43,"author":{"gitId":"hambot072"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":44,"author":{"gitId":"hambot072"},"content":"        taskList.createTodoTask(\"todo read book\");","lastModifiedDate":"2022-04-15"},{"lineNumber":45,"author":{"gitId":"hambot072"},"content":"        taskList.markTaskAsDone(\"tag 1 fun\");","lastModifiedDate":"2022-04-15"},{"lineNumber":46,"author":{"gitId":"hambot072"},"content":"        taskList.markTaskAsNotDone(\"untag 1\");","lastModifiedDate":"2022-04-15"},{"lineNumber":47,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":48,"author":{"gitId":"hambot072"},"content":"    @Test","lastModifiedDate":"2022-04-15"},{"lineNumber":49,"author":{"gitId":"hambot072"},"content":"    public void FindTest() throws DukeException, IOException {","lastModifiedDate":"2022-04-15"},{"lineNumber":50,"author":{"gitId":"hambot072"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-04-15"},{"lineNumber":51,"author":{"gitId":"hambot072"},"content":"        taskList.createTodoTask(\"todo read book\");","lastModifiedDate":"2022-04-15"},{"lineNumber":52,"author":{"gitId":"hambot072"},"content":"        taskList.findTask(\"find book\");","lastModifiedDate":"2022-04-15"},{"lineNumber":53,"author":{"gitId":"hambot072"},"content":"    }","lastModifiedDate":"2022-04-15"},{"lineNumber":54,"author":{"gitId":"hambot072"},"content":"}","lastModifiedDate":"2022-04-15"}],"authorContributionMap":{"hambot072":54}},{"path":"taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hambot072"},"content":"[D] [ ] return book by: 2022-04-10T12:00 #fun","lastModifiedDate":"2022-04-17"},{"lineNumber":2,"author":{"gitId":"hambot072"},"content":"[T] [ ]","lastModifiedDate":"2022-04-17"},{"lineNumber":3,"author":{"gitId":"hambot072"},"content":"[E] [ ] test at: 2022-04-10T12:01","lastModifiedDate":"2022-04-17"},{"lineNumber":4,"author":{"gitId":"hambot072"},"content":"[D] [ ] return book by: 2022-04-10T12:00","lastModifiedDate":"2022-04-17"},{"lineNumber":5,"author":{"gitId":"hambot072"},"content":"[E] [ ] walk the plank at: 2022-03-21T23:14 #boring","lastModifiedDate":"2022-04-17"},{"lineNumber":6,"author":{"gitId":"hambot072"},"content":"[T] [ ] book return","lastModifiedDate":"2022-04-17"},{"lineNumber":7,"author":{"gitId":"hambot072"},"content":"[D] [ ] burn book by: 2022-04-10T12:00 #testing","lastModifiedDate":"2022-04-17"},{"lineNumber":8,"author":{"gitId":"hambot072"},"content":"[T] [ ] test","lastModifiedDate":"2022-04-17"},{"lineNumber":9,"author":{"gitId":"hambot072"},"content":"[E] [ ] burn the plank at: 2022-03-21T23:14","lastModifiedDate":"2022-04-17"},{"lineNumber":10,"author":{"gitId":"hambot072"},"content":"[D] [ ] dance by: 2022-04-22T16:00","lastModifiedDate":"2022-04-17"}],"authorContributionMap":{"hambot072":10}}]
